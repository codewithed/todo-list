(()=>{"use strict";const t=(t,e,n,o,d)=>({title:t,dueDate:e,description:n,priority:o,completedStatus:d,editTitle(t){this.title=t},editDescription(t){this.description=t},editPriority(t){this.priority=t},editDueDate(t){this.dueDate=t},editCompletedStatus(t){this.completedStatus=t}});function e(t,e){if(e.length<t)throw new TypeError(t+" argument"+(t>1?"s":"")+" required, but only "+e.length+" present")}function n(t){return n="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t},n(t)}function o(t){e(1,arguments);var o=Object.prototype.toString.call(t);return t instanceof Date||"object"===n(t)&&"[object Date]"===o?new Date(t.getTime()):"number"==typeof t||"[object Number]"===o?new Date(t):("string"!=typeof t&&"[object String]"!==o||"undefined"==typeof console||(console.warn("Starting with v2.0.0-beta.1 date-fns doesn't accept strings as date arguments. Please use `parseISO` to parse strings. See: https://github.com/date-fns/date-fns/blob/master/docs/upgradeGuide.md#string-arguments"),console.warn((new Error).stack)),new Date(NaN))}function d(t){e(1,arguments);var n=o(t);return n.setHours(0,0,0,0),n}function a(t,n){e(2,arguments);var o=d(t),a=d(n);return o.getTime()===a.getTime()}function i(t){if(null===t||!0===t||!1===t)return NaN;var e=Number(t);return isNaN(e)?e:e<0?Math.ceil(e):Math.floor(e)}var r={};function c(){return r}function s(t,n){var d,a,r,s,l,u,m,p;e(1,arguments);var y=c(),f=i(null!==(d=null!==(a=null!==(r=null!==(s=null==n?void 0:n.weekStartsOn)&&void 0!==s?s:null==n||null===(l=n.locale)||void 0===l||null===(u=l.options)||void 0===u?void 0:u.weekStartsOn)&&void 0!==r?r:y.weekStartsOn)&&void 0!==a?a:null===(m=y.locale)||void 0===m||null===(p=m.options)||void 0===p?void 0:p.weekStartsOn)&&void 0!==d?d:0);if(!(f>=0&&f<=6))throw new RangeError("weekStartsOn must be between 0 and 6 inclusively");var g=o(t),v=g.getDay(),b=(v<f?7:0)+v-f;return g.setDate(g.getDate()-b),g.setHours(0,0,0,0),g}function l(t,n,o){e(2,arguments);var d=s(t,o),a=s(n,o);return d.getTime()===a.getTime()}const u=t=>{const n=[];return{projectName:t,arr:n,addTask:t=>{n.push(t)},removeTask:t=>{n.splice(n.indexOf(t),1)},getTodayTasks:()=>{n.filter((t=>function(t){return e(1,arguments),a(t,Date.now())}(t.dueDate)))},getWeeklyTasks:()=>{n.filter((t=>function(t,n){return e(1,arguments),l(t,Date.now(),n)}(t.dueDate)))},pastDueTasks:()=>{n.filter((t=>function(t){return e(1,arguments),o(t).getTime()<Date.now()}(t.dueDate)))}}};!function(){const e=u("defaultProject"),n=function(){const t=[];return{arr:t,addProject:function(e){t.push(e)},removeProject:function(e){t.splice(t.indexOf(e),1)}}}();function o(){const t=document.getElementById("projectTitle").value;if(void 0===t||""===t)alert("Project name can't be empty");else{const e=document.getElementById("projectPrompt"),o=u(t);n.addProject(o);const d=document.getElementById("userProjects"),a=document.createElement("button");a.classList.add("project-button"),a.style.id="projectButton",a.innerHTML=`<div class="left-project-panel"><i class="fa-solid fa-list"></i><span>&nbsp${t}</span></div>\n     <div class="right-project-panel"><i class="fa-solid fa-xmark"></i></div>`,d.appendChild(a),document.getElementById("addProjectBtn").style.display="block",e.remove()}}function d(){const t=document.getElementById("addProjectBtn");document.getElementById("projectPrompt").remove(),t.style.display="block"}function a(t){t.target.classList.contains("fa-xmark")&&t.target.parentNode.parentNode.remove()}function i(){const n=document.getElementById("todoPrompt"),o=document.getElementById("taskTitle").value;if(void 0===o||""===o||null===o)alert("Task name cannot be empty");else{const d=t(o);e.addTask(d),n.remove();const i=document.createElement("button");i.classList.add("todo-item"),i.innerHTML=`<div class="left-task-panel"><i class="fa-regular fa-circle"></i><p>${o}</p><input type="text" class="input-task-name" data-input-task-name=""></div>\n      <div class="right-task-panel"><p id='dueDate'>No Date</p><input type="date" name="" id="inputDueDate" class="input-date" data-input-date><i class="fa-solid fa-xmark"></i></i></div>`,document.getElementById("tasklist").append(i),i.addEventListener("click",a),document.getElementById("addTodoBtn").style.display="block"}}function r(){document.getElementById("todoPrompt").remove(),document.getElementById("addTodoBtn").style.display="block"}document.getElementById("addProjectBtn").addEventListener("click",(function(){const t=document.createElement("div"),e=document.getElementById("userProjects");t.setAttribute("id","projectPrompt");const n=document.getElementById("addProjectBtn");t.classList.add("project-prompt"),t.innerHTML='<input type="text" value="" placeholder="project title" id=\'projectTitle\'>\n   <div><button id="add" style="background-color: rgb(123, 237, 157);">Add</button>\n   <button id="cancel" style="background-color: rgb(247, 95, 95)">Cancel</button></div>',e.append(t),n.style.display="none";const a=document.getElementById("add"),i=document.getElementById("cancel");a.addEventListener("click",o),i.addEventListener("click",d)})),document.getElementById("addTodoBtn").addEventListener("click",(function(){document.getElementById("addTodoBtn").style.display="none";const t=document.createElement("div");t.setAttribute("id","todoPrompt"),t.classList.add("project-prompt"),t.innerHTML='<input type="text" value="" placeholder="task title" id=\'taskTitle\'>\n    <div><button id="add" style="background-color: rgb(123, 237, 157);">Add</button>\n    <button id="cancel" style="background-color: rgb(247, 95, 95)">Cancel</button></div>',document.getElementById("tasklist").appendChild(t);const e=document.getElementById("add"),n=document.getElementById("cancel");e.addEventListener("click",i),n.addEventListener("click",r)}))}()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,