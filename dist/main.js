(()=>{"use strict";const t=(t,e,n,a,o)=>({title:t,dueDate:e,description:n,priority:a,completedStatus:o,editTitle(t){this.title=t},editDescription(t){this.description=t},editPriority(t){this.priority=t},editDueDate(t){this.dueDate=t},editCompletedStatus(t){this.completedStatus=t}}),e=function(){this.arr=[],this.addProject=t=>{this.arr.push(t)},this.removeProject=t=>{this.arr.splice(t,1)}};function n(t,e){if(e.length<t)throw new TypeError(t+" argument"+(t>1?"s":"")+" required, but only "+e.length+" present")}function a(t){return a="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t},a(t)}function o(t){n(1,arguments);var e=Object.prototype.toString.call(t);return t instanceof Date||"object"===a(t)&&"[object Date]"===e?new Date(t.getTime()):"number"==typeof t||"[object Number]"===e?new Date(t):("string"!=typeof t&&"[object String]"!==e||"undefined"==typeof console||(console.warn("Starting with v2.0.0-beta.1 date-fns doesn't accept strings as date arguments. Please use `parseISO` to parse strings. See: https://github.com/date-fns/date-fns/blob/master/docs/upgradeGuide.md#string-arguments"),console.warn((new Error).stack)),new Date(NaN))}function i(t){n(1,arguments);var e=o(t);return e.setHours(0,0,0,0),e}function s(t,e){n(2,arguments);var a=i(t),o=i(e);return a.getTime()===o.getTime()}function d(t){if(null===t||!0===t||!1===t)return NaN;var e=Number(t);return isNaN(e)?e:e<0?Math.ceil(e):Math.floor(e)}var r={};function c(){return r}function l(t,e){var a,i,s,r,l,u,m,p;n(1,arguments);var y=c(),f=d(null!==(a=null!==(i=null!==(s=null!==(r=null==e?void 0:e.weekStartsOn)&&void 0!==r?r:null==e||null===(l=e.locale)||void 0===l||null===(u=l.options)||void 0===u?void 0:u.weekStartsOn)&&void 0!==s?s:y.weekStartsOn)&&void 0!==i?i:null===(m=y.locale)||void 0===m||null===(p=m.options)||void 0===p?void 0:p.weekStartsOn)&&void 0!==a?a:0);if(!(f>=0&&f<=6))throw new RangeError("weekStartsOn must be between 0 and 6 inclusively");var g=o(t),v=g.getDay(),b=(v<f?7:0)+v-f;return g.setDate(g.getDate()-b),g.setHours(0,0,0,0),g}function u(t,e,a){n(2,arguments);var o=l(t,a),i=l(e,a);return o.getTime()===i.getTime()}const m=function(t){this.name=t,this.arr=[],this.addTask=t=>{this.arr.push(t)},this.removeTask=t=>{this.arr.splice(t,1)},this.getTodayTasks=()=>{this.filter((t=>function(t){return n(1,arguments),s(t,Date.now())}(t.dueDate)))},this.getWeeklyTasks=()=>{this.arr.filter((t=>function(t,e){return n(1,arguments),u(t,Date.now(),e)}(t.dueDate)))},this.pastDueTasks=()=>{this.arr.filter((t=>function(t){return n(1,arguments),o(t).getTime()<Date.now()}(t.dueDate)))}};!function(){const n=new m("defaultProject");let a=n;const o=new e;function i(t){document.getElementById("tasklist").innerHTML="",document.getElementById("projectTitle").innerText=t}function s(t){t.forEach((t=>{const e=document.getElementById("tasklist"),n=document.createElement("button");n.classList.add("todo-item"),n.innerHTML=`<div class="left-task-panel"><i class="fa-regular fa-circle"></i><p class="todo-title">${t.title}</p><input type="text" class="input-task-name" data-input-task-name=""></div>\n      <div class="right-task-panel"><p class='due-date'>${t.dueDate}</p><input type="date" name="" id="inputDueDate" class="input-date" data-input-date><i class="fa-solid fa-xmark"></i></i></div>`;const o=a.arr.length;n.setAttribute("data-index",o),e.append(n),n.addEventListener("click",c)}))}function d(){const t=document.getElementById("projectTitle").value;if(void 0===t||""===t)alert("Project name can't be empty");else{const e=document.getElementById("projectPrompt"),d=new m(t);o.addProject(d);const r=document.getElementById("userProjects"),c=document.createElement("button");c.classList.add("project-button"),c.style.id="projectButton",c.setAttribute("data-index",o.arr.length-1),c.innerHTML=`<div class="left-project-panel"><i class="fa-solid fa-list"></i><span>&nbsp${t}</span></div>\n     <div class="right-project-panel"><i class="fa-solid fa-xmark"></i></div>`,r.appendChild(c),document.getElementById("addProjectBtn").style.display="block",e.remove(),c.addEventListener("click",(()=>{a=d,i(d.name),s(a.arr)})),c.addEventListener("click",(t=>{!function(t){if(t.target.classList.contains("fa-xmark")){const e=t.target.parentElement.parentElement,d=e.dataset.index;o.removeProject(d),e.remove(),t.stopPropagation(),a=n,i("Inbox"),s(a.arr)}}(t)}))}}function r(){const t=document.getElementById("addProjectBtn");document.getElementById("projectPrompt").remove(),t.style.display="block"}function c(t){if(t.target.classList.contains("fa-xmark")){const e=t.target.parentElement.parentElement;e.remove();const n=e.dataset.index;a.removeTask(n)}}function l(t){if(t.target.classList.contains("todo-title")||t.target.classList.contains("due-date")){const e=t.target;e.style.display="none";const n=t.target.parentElement.querySelector("input");n.classList.add("active"),document.addEventListener("keyup",(t=>{if("Enter"===t.key){const t=n.value;if(""===t||void 0===e)alert("Value cannot be empty");else{n.classList.remove("active"),e.style.display="block";const{index:o}=e.parentElement.parentElement.dataset;e.innerText=t,e.classList.contains("todo-title")&&a.arr[o].editTitle(t),e.classList.contains("due-date")&&a.arr[o].editDueDate(t)}}}))}}function u(){const e=document.getElementById("todoPrompt"),n=document.getElementById("taskTitle").value;if(void 0===n||""===n||null===n)alert("Task name cannot be empty");else{const o=t(n);a.addTask(o),e.remove();const i=document.createElement("button");i.classList.add("todo-item"),i.innerHTML=`<div class="left-task-panel"><i class="fa-regular fa-circle"></i><p class="todo-title">${n}</p><input type="text" class="input-task-name" data-input-task-name=""></div>\n      <div class="right-task-panel"><p class="due-date">No Date</p><input type="date" name="" id="inputDueDate" class="input-date" data-input-date><i class="fa-solid fa-xmark"></i></i></div>`;const s=document.getElementById("tasklist"),d=a.arr.length-1;i.setAttribute("data-index",d),s.append(i),i.addEventListener("click",c),i.addEventListener("click",l),document.getElementById("addTodoBtn").style.display="block"}}function p(){document.getElementById("todoPrompt").remove(),document.getElementById("addTodoBtn").style.display="block"}function y(){s(n.arr)}document.getElementById("addProjectBtn").addEventListener("click",(function(){const t=document.createElement("div"),e=document.getElementById("userProjects");t.setAttribute("id","projectPrompt");const n=document.getElementById("addProjectBtn");t.classList.add("project-prompt"),t.innerHTML='<input type="text" value="" placeholder="project title" id=\'projectTitle\'>\n   <div><button id="add" style="background-color: rgb(123, 237, 157);">Add</button>\n   <button id="cancel" style="background-color: rgb(247, 95, 95)">Cancel</button></div>',e.append(t),n.style.display="none";const a=document.getElementById("add"),o=document.getElementById("cancel");a.addEventListener("click",d),o.addEventListener("click",r)})),document.getElementById("addTodoBtn").addEventListener("click",(function(){document.getElementById("addTodoBtn").style.display="none";const t=document.createElement("div");t.setAttribute("id","todoPrompt"),t.classList.add("project-prompt"),t.innerHTML='<input type="text" value="" placeholder="task title" id=\'taskTitle\'>\n    <div><button id="add" style="background-color: rgb(123, 237, 157);">Add</button>\n    <button id="cancel" style="background-color: rgb(247, 95, 95)">Cancel</button></div>',document.getElementById("tasklist").appendChild(t);const e=document.getElementById("add"),n=document.getElementById("cancel");e.addEventListener("click",u),n.addEventListener("click",p)})),document.getElementById("inboxBtn").addEventListener("click",(()=>{a=n,i("Inbox"),y()})),i("Inbox"),y()}()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,