(()=>{"use strict";const t=(t,e,n,o,a)=>({title:t,dueDate:e,description:n,priority:o,completedStatus:a,editTitle(t){this.title=t},editDescription(t){this.description=t},editPriority(t){this.priority=t},editDueDate(t){this.dueDate=t},editCompletedStatus(t){this.completedStatus=t}}),e=function(){this.arr=[],this.addProject=t=>{this.arr.push(t)},this.removeProject=t=>{this.arr.splice(t,1)}};function n(t,e){if(e.length<t)throw new TypeError(t+" argument"+(t>1?"s":"")+" required, but only "+e.length+" present")}function o(t){return o="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t},o(t)}function a(t){n(1,arguments);var e=Object.prototype.toString.call(t);return t instanceof Date||"object"===o(t)&&"[object Date]"===e?new Date(t.getTime()):"number"==typeof t||"[object Number]"===e?new Date(t):("string"!=typeof t&&"[object String]"!==e||"undefined"==typeof console||(console.warn("Starting with v2.0.0-beta.1 date-fns doesn't accept strings as date arguments. Please use `parseISO` to parse strings. See: https://github.com/date-fns/date-fns/blob/master/docs/upgradeGuide.md#string-arguments"),console.warn((new Error).stack)),new Date(NaN))}function i(t){n(1,arguments);var e=a(t);return e.setHours(0,0,0,0),e}function s(t,e){n(2,arguments);var o=i(t),a=i(e);return o.getTime()===a.getTime()}function d(t){if(null===t||!0===t||!1===t)return NaN;var e=Number(t);return isNaN(e)?e:e<0?Math.ceil(e):Math.floor(e)}var r={};function c(){return r}function l(t,e){var o,i,s,r,l,u,m,p;n(1,arguments);var y=c(),f=d(null!==(o=null!==(i=null!==(s=null!==(r=null==e?void 0:e.weekStartsOn)&&void 0!==r?r:null==e||null===(l=e.locale)||void 0===l||null===(u=l.options)||void 0===u?void 0:u.weekStartsOn)&&void 0!==s?s:y.weekStartsOn)&&void 0!==i?i:null===(m=y.locale)||void 0===m||null===(p=m.options)||void 0===p?void 0:p.weekStartsOn)&&void 0!==o?o:0);if(!(f>=0&&f<=6))throw new RangeError("weekStartsOn must be between 0 and 6 inclusively");var g=a(t),v=g.getDay(),b=(v<f?7:0)+v-f;return g.setDate(g.getDate()-b),g.setHours(0,0,0,0),g}function u(t,e,o){n(2,arguments);var a=l(t,o),i=l(e,o);return a.getTime()===i.getTime()}const m=function(t){this.name=t,this.arr=[],this.addTask=t=>{this.arr.push(t)},this.removeTask=t=>{this.arr.splice(t,1)},this.getTodayTasks=()=>{this.filter((t=>function(t){return n(1,arguments),s(t,Date.now())}(t.dueDate)))},this.getWeeklyTasks=()=>{this.arr.filter((t=>function(t,e){return n(1,arguments),u(t,Date.now(),e)}(t.dueDate)))},this.pastDueTasks=()=>{this.arr.filter((t=>function(t){return n(1,arguments),a(t).getTime()<Date.now()}(t.dueDate)))}};!function(){const n=new m("defaultProject");let o=n;const a=new e;function i(t){if(t.target.classList.contains("todo-title")||t.target.classList.contains("due-date")){const e=t.target;e.style.display="none";const n=t.target.parentElement.querySelector("input");n.classList.add("active"),document.addEventListener("keyup",(t=>{if("Enter"===t.key){const t=n.value;if(""===t||void 0===t)alert("Value cannot be empty");else{n.classList.remove("active"),e.style.display="block";const a=e.parentElement.parentElement.dataset;e.innerText=t,e.classList.contains("todo-title")&&o.arr[a].editTitle(t),e.classList.contains("due-date")&&o.arr[a].editDueDate(t)}}}))}}function s(t){if(t.target.classList.contains("fa-xmark")){const e=t.target.parentElement.parentElement;e.remove();const n=e.dataset.index;o.removeTask(n)}}function d(t,e){const n=document.getElementById("tasklist"),a=document.createElement("button");a.classList.add("todo-item"),a.innerHTML=`<div class="left-task-panel"><i class="fa-regular fa-circle"></i><p class="todo-title">${t}</p><input type="text" class="input-task-name" data-input-task-name=""></div>\n    <div class="right-task-panel"><p class='due-date'>${e}</p><input type="date" name="" id="inputDueDate" class="input-date" data-input-date><i class="fa-solid fa-xmark"></i></i></div>`;const d=o.arr.length;a.setAttribute("data-index",d),n.append(a),a.addEventListener("click",s),a.addEventListener("click",i)}function r(t){t.forEach((t=>{d(t.title,t.dueDate)}))}function c(t){document.getElementById("tasklist").innerHTML="",document.getElementById("projectTitle").innerText=t}function l(){const t=document.getElementById("addProjectBtn");document.getElementById("projectPrompt").remove(),t.style.display="block"}function u(){document.getElementById("todoPrompt").remove(),document.getElementById("addTodoBtn").style.display="block"}function p(){const e=document.getElementById("todoPrompt"),n=document.getElementById("taskTitle").value;if(void 0===n||""===n||null===n)alert("Task name cannot be empty");else{const a=t(n);o.addTask(a),e.remove(),d(n),document.getElementById("addTodoBtn").style.display="block"}}function y(){r(n.arr)}document.getElementById("addProjectBtn").addEventListener("click",(function(){const t=document.createElement("div"),e=document.getElementById("userProjects");t.setAttribute("id","projectPrompt");const n=document.getElementById("addProjectBtn");t.classList.add("project-prompt"),t.innerHTML='<input type="text" value="" placeholder="project title" id=\'projectTitle\'>\n   <div><button id="add" style="background-color: rgb(123, 237, 157);">Add</button>\n   <button id="cancel" style="background-color: rgb(247, 95, 95)">Cancel</button></div>',e.append(t),n.style.display="none";const i=document.getElementById("add"),s=document.getElementById("cancel");i.addEventListener("click",(()=>{const t=document.getElementById("projectTitle").value;void 0!==t&&""!==t||alert("Project name can't be empty"),function(t){const e=new m(t);a.addProject(e)}(t),function(t){const e=document.getElementById("userProjects"),n=document.createElement("button");n.classList.add("project-button"),n.style.id="projectButton";const i=a.arr.length-1;n.setAttribute("data-index",i),n.innerHTML=`<div class="left-project-panel"><i class="fa-solid fa-list"></i><span>&nbsp${t}</span></div>\n     <div class="right-project-panel"><i class="fa-solid fa-xmark"></i></div>`,e.appendChild(n),document.getElementById("addProjectBtn").style.display="block",n.addEventListener("click",(t=>{!function(t){if(t.target.classList.contains("fa-xmark")){const e=t.target.parentElement.parentElement,n=e.dataset.index;a.removeProject(n),e.remove(),t.stopPropagation()}}(t),o=a.arr[i],c(o.name),r(o.arr)}))}(t),l()})),s.addEventListener("click",l)})),document.getElementById("addTodoBtn").addEventListener("click",(function(){document.getElementById("addTodoBtn").style.display="none";const t=document.createElement("div");t.setAttribute("id","todoPrompt"),t.classList.add("project-prompt"),t.innerHTML='<input type="text" value="" placeholder="task title" id=\'taskTitle\'>\n    <div><button id="add" style="background-color: rgb(123, 237, 157);">Add</button>\n    <button id="cancel" style="background-color: rgb(247, 95, 95)">Cancel</button></div>',document.getElementById("tasklist").appendChild(t);const e=document.getElementById("add"),n=document.getElementById("cancel");e.addEventListener("click",p),n.addEventListener("click",u)})),document.getElementById("inboxBtn").addEventListener("click",(()=>{o=n,c("Inbox"),y()})),c("Inbox"),y()}()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,