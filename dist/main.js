(()=>{"use strict";const t=(t,e,n,o,a)=>({title:t,dueDate:e,description:n,priority:o,completedStatus:a,editTitle(t){this.title=t},editDescription(t){this.description=t},editPriority(t){this.priority=t},editDueDate(t){this.dueDate=t},editCompletedStatus(t){this.completedStatus=t}});function e(t,e){if(e.length<t)throw new TypeError(t+" argument"+(t>1?"s":"")+" required, but only "+e.length+" present")}function n(t){return n="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t},n(t)}function o(t){e(1,arguments);var o=Object.prototype.toString.call(t);return t instanceof Date||"object"===n(t)&&"[object Date]"===o?new Date(t.getTime()):"number"==typeof t||"[object Number]"===o?new Date(t):("string"!=typeof t&&"[object String]"!==o||"undefined"==typeof console||(console.warn("Starting with v2.0.0-beta.1 date-fns doesn't accept strings as date arguments. Please use `parseISO` to parse strings. See: https://github.com/date-fns/date-fns/blob/master/docs/upgradeGuide.md#string-arguments"),console.warn((new Error).stack)),new Date(NaN))}function a(t){e(1,arguments);var n=o(t);return n.setHours(0,0,0,0),n}function i(t,n){e(2,arguments);var o=a(t),i=a(n);return o.getTime()===i.getTime()}function s(t){if(null===t||!0===t||!1===t)return NaN;var e=Number(t);return isNaN(e)?e:e<0?Math.ceil(e):Math.floor(e)}var r={};function d(){return r}function c(t,n){var a,i,r,c,l,u,m,p;e(1,arguments);var y=d(),f=s(null!==(a=null!==(i=null!==(r=null!==(c=null==n?void 0:n.weekStartsOn)&&void 0!==c?c:null==n||null===(l=n.locale)||void 0===l||null===(u=l.options)||void 0===u?void 0:u.weekStartsOn)&&void 0!==r?r:y.weekStartsOn)&&void 0!==i?i:null===(m=y.locale)||void 0===m||null===(p=m.options)||void 0===p?void 0:p.weekStartsOn)&&void 0!==a?a:0);if(!(f>=0&&f<=6))throw new RangeError("weekStartsOn must be between 0 and 6 inclusively");var g=o(t),v=g.getDay(),b=(v<f?7:0)+v-f;return g.setDate(g.getDate()-b),g.setHours(0,0,0,0),g}function l(t,n,o){e(2,arguments);var a=c(t,o),i=c(n,o);return a.getTime()===i.getTime()}const u=function(t){this.name=t,this.arr=[],this.addTask=t=>{this.arr.push(t)},this.removeTask=t=>{this.arr.splice(t,1)},this.getTodayTasks=()=>{this.filter((t=>function(t){return e(1,arguments),i(t,Date.now())}(t.dueDate)))},this.getWeeklyTasks=()=>{this.arr.filter((t=>function(t,n){return e(1,arguments),l(t,Date.now(),n)}(t.dueDate)))},this.pastDueTasks=()=>{this.arr.filter((t=>function(t){return e(1,arguments),o(t).getTime()<Date.now()}(t.dueDate)))}};function m(t,e){localStorage.setItem(t,JSON.stringify(e))}function p(t){return JSON.parse(localStorage.getItem(t))}!function(){const e=p("defaultProject")||new u("defaultProject");let n=e;const o=p("projectList")||[];function a(t,e,a){const i=document.getElementById("tasklist"),s=document.createElement("button");s.classList.add("todo-item"),s.innerHTML=`<div class="left-task-panel"><i class="fa-regular fa-circle"></i><p class="todo-title">${t}</p><input type="text" class="input-task-name" data-input-task-name=""></div>\n    <div class="right-task-panel"><p class='due-date'>${e}</p><input type="date" name="" id="inputDueDate" class="input-date" data-input-date><i class="fa-solid fa-xmark"></i></i></div>`,s.setAttribute("data-index",a),i.append(s),s.addEventListener("click",(t=>{!function(t){if(t.target.classList.contains("fa-xmark")){const e=t.target.parentElement.parentElement,a=e.dataset.index;n.arr.splice(a,1),e.remove(),m(n.name,n),m("projectList",o)}}(t)})),s.addEventListener("click",(t=>{!function(t){if(t.target.classList.contains("todo-title")||t.target.classList.contains("due-date")){const e=t.target;e.style.display="none";const a=t.target.parentElement.querySelector("input");a.classList.add("active"),document.addEventListener("keyup",(t=>{if("Enter"===t.key){const t=a.value;if(""===t||void 0===t)alert("Value cannot be empty");else{a.classList.remove("active"),e.style.display="block";const i=e.parentElement.parentElement.dataset;e.innerText=t,e.classList.contains("todo-title")&&n.arr[i].editTitle(t),e.classList.contains("due-date")&&n.arr[i].editDueDate(t),m(n.name,n),m("projectList",o)}}}))}}(t)}))}function i(t){let e=0;t.forEach((t=>{a(t.title,t.dueDate,e),e+=1}))}function s(t){document.getElementById("tasklist").innerHTML="",document.getElementById("projectTitle").innerText=t}function r(t,e){const a=document.getElementById("userProjects"),r=document.createElement("button");r.classList.add("project-button"),r.style.id="projectButton",r.setAttribute("data-index",e),r.innerHTML=`<div class="left-project-panel"><i class="fa-solid fa-list"></i><span>&nbsp${t}</span></div>\n     <div class="right-project-panel"><i class="fa-solid fa-xmark"></i></div>`,a.appendChild(r),document.getElementById("addProjectBtn").style.display="block",r.addEventListener("click",(t=>{n=p(o[e].name),function(t){if(t.target.classList.contains("fa-xmark")){const n=t.target.parentElement.parentElement,a=n.dataset.index;e=o[a].name,localStorage.removeItem(e),o.splice(a,1),n.remove(),t.stopPropagation()}var e}(t),s(n.name),i(n.arr)}))}function d(){const t=document.getElementById("addProjectBtn");document.getElementById("projectPrompt").remove(),t.style.display="block"}function c(){document.getElementById("todoPrompt").remove(),document.getElementById("addTodoBtn").style.display="block"}function l(){const e=document.getElementById("todoPrompt"),o=document.getElementById("taskTitle").value;if(void 0===o||""===o||null===o)alert("Task name cannot be empty");else{const i=t(o);n.arr.push(i),e.remove(),a(i.title,i.dueDate,n.arr.length-1),document.getElementById("addTodoBtn").style.display="block",m(n.name,n)}}document.getElementById("addProjectBtn").addEventListener("click",(function(){const t=document.createElement("div"),e=document.getElementById("userProjects");t.setAttribute("id","projectPrompt");const n=document.getElementById("addProjectBtn");t.classList.add("project-prompt"),t.innerHTML='<input type="text" value="" placeholder="project title" id=\'projectTitle\'>\n   <div><button id="add" style="background-color: rgb(123, 237, 157);">Add</button>\n   <button id="cancel" style="background-color: rgb(247, 95, 95)">Cancel</button></div>',e.append(t),n.style.display="none";const a=document.getElementById("add"),i=document.getElementById("cancel");a.addEventListener("click",(()=>{const t=document.getElementById("projectTitle").value;void 0!==t&&""!==t||alert("Project name can't be empty"),function(t){const e=new u(t);o.push(e),m(e.name,e),m("projectList",o)}(t),r(t,o.length),d()})),i.addEventListener("click",d)})),document.getElementById("addTodoBtn").addEventListener("click",(function(){document.getElementById("addTodoBtn").style.display="none";const t=document.createElement("div");t.setAttribute("id","todoPrompt"),t.classList.add("project-prompt"),t.innerHTML='<input type="text" value="" placeholder="task title" id=\'taskTitle\'>\n    <div><button id="add" style="background-color: rgb(123, 237, 157);">Add</button>\n    <button id="cancel" style="background-color: rgb(247, 95, 95)">Cancel</button></div>',document.getElementById("tasklist").appendChild(t);const e=document.getElementById("add"),n=document.getElementById("cancel");e.addEventListener("click",l),n.addEventListener("click",c)})),document.getElementById("inboxBtn").addEventListener("click",(()=>{s("Inbox"),n=e,i(e.arr)})),s("Inbox"),n=e,i(e.arr),o.forEach((t=>{let e=0;r(t.name,e),e+=1}))}()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,